//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class JSON2Apex {

	public List<Sobjects> sobjects {get;set;} 

	public JSON2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'sobjects') {
						sobjects = arrayOfSobjects(parser);
					} 
				}
			}
		}
	}

	public class Sobjects {
		public Boolean activateable {get;set;} 
		public Object associateEntityType {get;set;} 
		public Object associateParentEntity {get;set;} 
		public Boolean createable {get;set;} 
		public Boolean custom {get;set;} 
		public Boolean customSetting {get;set;} 
		public Boolean deepCloneable {get;set;} 
		public Boolean deletable {get;set;} 
		public Boolean deprecatedAndHidden {get;set;} 
		public Boolean feedEnabled {get;set;} 
		public Boolean hasSubtypes {get;set;} 
		public Boolean isInterface {get;set;} 
		public Boolean isSubtype {get;set;} 
		public String keyPrefix {get;set;} 
		public String label {get;set;} 
		public String labelPlural {get;set;} 
		public Boolean layoutable {get;set;} 
		public Boolean mergeable {get;set;} 
		public Boolean mruEnabled {get;set;} 
		public String name {get;set;} 
		public Boolean queryable {get;set;} 
		public Boolean replicateable {get;set;} 
		public Boolean retrieveable {get;set;} 
		public Boolean searchable {get;set;} 
		public Boolean triggerable {get;set;} 
		public Boolean undeletable {get;set;} 
		public Boolean updateable {get;set;} 

		public Sobjects(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'activateable') {
							activateable = parser.getBooleanValue();
						} else if (text == 'associateEntityType') {
							associateEntityType = parser.readValueAs(Object.class);
						} else if (text == 'associateParentEntity') {
							associateParentEntity = parser.readValueAs(Object.class);
						} else if (text == 'createable') {
							createable = parser.getBooleanValue();
						} else if (text == 'custom') {
							custom = parser.getBooleanValue();
						} else if (text == 'customSetting') {
							customSetting = parser.getBooleanValue();
						} else if (text == 'deepCloneable') {
							deepCloneable = parser.getBooleanValue();
						} else if (text == 'deletable') {
							deletable = parser.getBooleanValue();
						} else if (text == 'deprecatedAndHidden') {
							deprecatedAndHidden = parser.getBooleanValue();
						} else if (text == 'feedEnabled') {
							feedEnabled = parser.getBooleanValue();
						} else if (text == 'hasSubtypes') {
							hasSubtypes = parser.getBooleanValue();
						} else if (text == 'isInterface') {
							isInterface = parser.getBooleanValue();
						} else if (text == 'isSubtype') {
							isSubtype = parser.getBooleanValue();
						} else if (text == 'keyPrefix') {
							keyPrefix = parser.getText();
						} else if (text == 'label') {
							label = parser.getText();
						} else if (text == 'labelPlural') {
							labelPlural = parser.getText();
						} else if (text == 'layoutable') {
							layoutable = parser.getBooleanValue();
						} else if (text == 'mergeable') {
							mergeable = parser.getBooleanValue();
						} else if (text == 'mruEnabled') {
							mruEnabled = parser.getBooleanValue();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'queryable') {
							queryable = parser.getBooleanValue();
						} else if (text == 'replicateable') {
							replicateable = parser.getBooleanValue();
						} else if (text == 'retrieveable') {
							retrieveable = parser.getBooleanValue();
						} else if (text == 'searchable') {
							searchable = parser.getBooleanValue();
						} else if (text == 'triggerable') {
							triggerable = parser.getBooleanValue();
						} else if (text == 'undeletable') {
							undeletable = parser.getBooleanValue();
						} else if (text == 'updateable') {
							updateable = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Sobjects consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public static JSON2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	





















    private static List<Sobjects> arrayOfSobjects(System.JSONParser p) {
        List<Sobjects> res = new List<Sobjects>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Sobjects(p));
        }
        return res;
    }






























}